package serviceAutorization

import (
	"database/sql"
	//"log"

	//"os"

	_ "github.com/lib/pq"
)

func checkUser(logData LogginDataClient, db *sql.DB) (*LogginDataClient, error) {
	var err error

	rows, err := db.Query("SELECT id, email, key, salt FROM idusers WHERE email = $1", logData.Email)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		if err = rows.Scan(&logData.Id, &logData.Email, &logData.Key, &logData.Salt); err != nil {
			return nil, err
		} else {
			return &logData, err
		}
	}

	return nil, err
}

func addUser(infoClient *LogginDataClient, db *sql.DB) (int, error) {
	var err error
	var id int

	/*if _, err := */
	db.QueryRow("INSERT INTO idusers (email, key, salt) VALUES ($1, $2, $3) returning id", infoClient.Email, infoClient.Key, infoClient.Salt).Scan(&id) /*err != nil {*/
	//		log.Println("test", err)
	//		return 0, err
	//	}
	return id, err
}

func updateUser(infoClient *LogginDataClient, db *sql.DB) error {
	var err error

	_, err = db.Exec("UPDATE idusers SET key = $1, salt = $2 WHERE email = $3", infoClient.Key, infoClient.Salt, infoClient.Email)
	if err != nil {
		return err
	}

	return err
}

func CreatDB(db *sql.DB) {
	if _, err := db.Exec("CREATE TABLE IF NOT EXISTS idusers (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, email text, key bytea, salt bytea)"); err != nil {
		return
	}
}
