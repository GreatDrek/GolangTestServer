package serviceAutorization

import (
	"database/sql"
	"log"

	//"os"

	_ "github.com/lib/pq"
)

func checkUser(logData LogginDataClient, db *sql.DB) (*InfoClient, error) {
	var err error
	var infoClient *InfoClient

	rows, err := db.Query("SELECT id, email, key, salt FROM idusers WHERE email = $1", logData.Email)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	var id int
	var email string
	var key []byte
	var salt []byte

	for rows.Next() {
		if err = rows.Scan(&id, &email, &key, &salt); err != nil {
			return nil, err
		} else {
			infoClient = &InfoClient{Id: id, Email: email, Key: key, Salt: salt}
		}
	}

	return infoClient, err
}

func addUser(infoClient *InfoClient, db *sql.DB) error {
	var err error

	if _, err := db.Exec("INSERT INTO idusers (email, key, salt) VALUES ($1, $2, $3)", infoClient.Email, infoClient.Key, infoClient.Salt); err != nil {
		log.Println("test", err)
		return err
	}
	return err
}

func updateUser(infoClient *InfoClient, db *sql.DB) error {
	var err error

	_, err = db.Exec("UPDATE idusers SET key = $1, salt = $2 WHERE email = $3", infoClient.Key, infoClient.Salt, infoClient.Email)
	if err != nil {
		return err
	}

	return err
}

func creatDB(db *sql.DB) {
	if _, err := db.Exec("CREATE TABLE IF NOT EXISTS idusers (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, email text, key bytea, salt bytea)"); err != nil {
		return
	}
}
